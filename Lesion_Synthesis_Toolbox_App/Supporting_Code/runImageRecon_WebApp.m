% runImageRecon_WebApp - main PET image reconstruction wrapper for 
% the Lesion Syntesis Toolbox (LST) webapp. The required reconstruction
% parameters previously generated by the LST webapp are contained in a 
% proprietary parameters file (reconParamFile) that referes to all
% required data files in predefined directories.
%
% Image reconstruction at this time is only supported using the GE DUETTO  
% TOOLOX. For development/modifications/access to source code please contact 
% GE Healthcare PET image reconstrcution development team 
% (As of early 2023: Michael.Spohn@gehealthcare.com and/or Elizabeth.Philps@med.gehealthcare.com)
%
% This function uses tools from the GE DUETTO TOOLBOX and
% therefore needs DUETTO in the file path.
%
% Usage: 
% ======
% runLesionInsertionPlusRecon(lesionParamsFile)
%
% Next Steps: ptbUserConfig, LesionInsertionDUETTO_WebApp,
%
% Author: Hanif Gabrani-Juma, B.Eng, MASc (2019)
% Created: 2018
% Last Modified: April 30 2019
%
% Heavily modified by Ran Klein, The Ottawa Hospital, 2022


function img = runImageRecon_WebApp(reconParamFile)
load(reconParamFile,'info');
switch info.reconParams.ReconToolbox
	case 'DUETTO'
		img = ReconJob_DUETTO(reconParamFile);
	otherwise
		error
end
end

%% DUETTO
function img = ReconJob_DUETTO(reconParamFile)
disp('======================================================================================================')
disp('|                                                                                                    |')
disp(['|  Starting DUETTO recon job for: ' reconParamFile repmat(' ',1, 67-length(reconParamFile)) '|'])   
disp('|                                                                                                    |')
disp('======================================================================================================')
disp(' ')

load(reconParamFile,'info');

% TO DO - rethink this, as cannot reconstruct two reconstructions in the
% same directory. 
patientDir = fileparts(reconParamFile);

% Copy the necessary files to Baseline PET dirs
if isMissingRawData(patientDir)
	copyfile([info.patDataDir filesep 'raw'],[patientDir filesep 'raw'])
	copyfile([info.patDataDir filesep 'CTAC_DICOM'],[patientDir filesep 'CTAC_DICOM'])
	copyfile([info.patDataDir filesep 'norm3d'],[patientDir filesep 'norm3d.RDF'])
	copyfile([info.patDataDir filesep 'geo3d'],[patientDir filesep 'geo3d.RDF'])
end

cd(patientDir)

userConfig = ptbUserConfig(info.reconParams.Algorithm);
userConfig.dicomSeriesDesc = info.reconParams.SeriesDesc;
userConfig.dicomImageSeriesDesc = [info.reconParams.SimName '_BaselineRecon'];
userConfig.nX = info.reconParams.nXdim;

userConfig.nSubsets =  info.reconParams.Subsets;
userConfig.nIterations = info.reconParams.Iterations;
userConfig.zFilter = info.reconParams.zfilter;
userConfig.postFilterFwhm = info.reconParams.FilterFWHM;
userConfig.beta = info.reconParams.beta;

userConfig.attenDataDir = [patientDir filesep 'CTAC_DICOM'];

userConfig.nParallelThreads = getLSTThreads;
vol = ptbRunRecon(userConfig);
% vol = ptbReadSaveFile('ir3d.sav'); % to load vol

%% Clean up parallel pool
delete(gcp('nocreate'));
myCluster = parcluster('local');
delete(myCluster.Jobs);

%% Clean up unclosed files
fId = fopen('all');
if ~isempty(fId)
	disp('Someone left files open:');
	for i=1:length(fId)
		disp(fopen(fId(i)));
	end
	fclose('all');
	disp('But we closed them');
end

% This is where the DICOM series is saved
% dicomDir = [patientDir filesep userConfig.dicomSeriesDesc];
dicomDir = [patientDir filesep info.reconName];
movefile([patientDir filesep userConfig.dicomSeriesDesc], dicomDir)

% Fix the DICOM files to include radiopharmaceutical information
fixGEReconDICOMOutput(dicomDir);

disp('Take a breath')
pause(3);

% Make one clean mat file of the reconstructed image
files = listfiles('*.sdcopen', dicomDir);
infodcm = dicominfo([dicomDir filesep files{1}]);
[hdr, infodcm] = hdrInitDcm(infodcm);
save([patientDir filesep info.reconName '_fIR3D.mat'], 'vol', 'hdr', 'infodcm');
img = struct('vol', vol,...
			'hdr', hdr,...
			'infodcm', infodcm);

cd(fileparts(patientDir))

% [~, f, ~] = fileparts(patientDir);
archiveDir = [info.saveDir filesep hdr.patientID];
if ~exist(archiveDir,'dir')
	mkdir(archiveDir)
end

if ~exist([archiveDir filesep 'CTAC.mat'], 'file')
	disp('Making a mat file image for the CT in the archive')
	makeCTmatFile([patientDir filesep 'CTAC_DICOM'], [archiveDir filesep 'CTAC.mat']);
end

if lastPatientRecon(patientDir)
	disp('Moving all results and intermediates to archive directory')
	% clean up
	movefile(patientDir, info.saveDir, 'f');
else
	disp(['Moving results to archive directory:' archiveDir])
	% keep the raw and intermediate files for next recon of data
	movefile(dicomDir, archiveDir ,'f');
	movefile(reconParamFile, archiveDir, 'f');
	movefile([patientDir filesep info.reconName '_fIR3D.mat'], archiveDir ,'f');
end

end



%% Determine if this is the last reconstruction for this patient
function result = lastPatientRecon(patientDir)
files = listfiles('*_reconParams.mat', patientDir);
result = length(files) == 1;
end

%% Are raw data missing?
function result = isMissingRawData(patientDir)
result = ~(exist([patientDir filesep 'raw'],'dir') && ...
	       exist([patientDir filesep 'CTAC_DICOM'],'dir') && ...
		   exist([patientDir filesep 'norm3d.RDF'],'file') &&...
		   exist([patientDir filesep 'geo3d.RDF'],'file'));
end